apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = 'org.zero.boot.web.init.App'

jar {
	version = '1.0'
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
	}
}

repositories {
    mavenCentral()
}

ext {
	druidVersion                           = '1.1.5'
	fastjsonVersion                        = '1.2.62'
	feignVersion                           = '12.3'
	log4jVersion						   = '1.7.25'
    lombokVersion                          = '1.16.18'
    mybatisVersion                         = '1.3.1'
	junitVersion						   = '4.13-rc-1'
	rocketmqVersion                        = '5.0.4'
	sentinelVersion                        = '1.8.6'
	springbootVersion                      = '1.5.3.RELEASE'
	springStatemachineVersion              = '1.2.6.RELEASE'
	springKafkaVersion					   = '1.2.3.RELEASE'
	prometheusVersion					   = '0.6.0'
	
	libraries = [
        druid:                            "com.alibaba:druid:${druidVersion}",
        fastjson:                         "com.alibaba:fastjson:${fastjsonVersion}",
		feign:                            "io.github.openfeign:feign-core:${feignVersion}",
        hsql:                             "org.hsqldb:hsqldb",
		jdbcConnector:                    "mysql:mysql-connector-java",
		
		prometheus:						  "io.prometheus:simpleclient_spring_boot:${prometheusVersion}",
		log4jOver:						  "org.slf4j:log4j-over-slf4j:${log4jVersion}",
		lombok:                           "org.projectlombok:lombok:${lombokVersion}",
		rocketmq:                         "org.apache.rocketmq:rocketmq-client-java:${rocketmqVersion}",
		sentinel:                         "com.alibaba.csp:sentinel-core:${sentinelVersion}",
		// 
		springStatusmachine:              "org.springframework.statemachine:spring-statemachine-core:${springStatemachineVersion}",
		
		springSession:                    "org.springframework.session:spring-session-data-redis",
		springBoot:                       "org.springframework.boot:spring-boot-starter",
		springBootConfigProcessor:        "org.springframework.boot:spring-boot-configuration-processor",
		springBootJdbc:                   "org.springframework.boot:spring-boot-starter-jdbc",
		springBootDataRedis:              "org.springframework.boot:spring-boot-starter-data-redis",
		springBootMail:                   "org.springframework.boot:spring-boot-starter-mail",
		springBootVelocity:               "org.springframework.boot:spring-boot-starter-velocity",
		springBootFreemarker:             "org.springframework.boot:spring-boot-starter-freemarker",
		springBootAmqp:                   "org.springframework.boot:spring-boot-starter-amqp",
		springBootAop:                    "org.springframework.boot:spring-boot-starter-aop",
		springBootMyBatis:                "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}",
		springBootWeb:                    "org.springframework.boot:spring-boot-starter-web",
		springThymeleaf:                  "org.springframework.boot:spring-boot-starter-thymeleaf",
		springSecurity:                   "org.springframework.boot:spring-boot-starter-security",
		springActuator:                   "org.springframework.boot:spring-boot-starter-actuator",
        log4j2YmlSupport:                 "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml",
		springBootLog4j2:                 "org.springframework.boot:spring-boot-starter-log4j2",
		springBootKafka:				  "org.springframework.kafka:spring-kafka:${springKafkaVersion}",
		springBootKafkaTest:			  "org.springframework.kafka:spring-kafka-test:${springKafkaVersion}",

		springBootTest:                   "org.springframework.boot:spring-boot-starter-test",
		springSecurityTest:               "org.springframework.security:spring-security-test",
		junit:                            "junit:junit:${junitVersion}"
	]
}


dependencies {
//  compile(libraries.hsql) // spring-boot 
    compile(libraries.lombok)
	annotationProcessor(libraries.lombok)
    compile(libraries.fastjson)
	compile(libraries.feign)		// remote invoke framework
    compile(libraries.log4jOver)    // just for org.apache.log4j.Priority
    compile(libraries.springBoot)     
    compile(libraries.jdbcConnector)
    compile(libraries.druid)

	compile(libraries.rocketmq)	// rocket mq
	compile(libraries.sentinel) // alibaba sentinel

    compile(libraries.springBootLog4j2)
    compile(libraries.log4j2YmlSupport)
    compile(libraries.springBootWeb) 
    compile(libraries.springBootConfigProcessor) 
    compile(libraries.springBootAop) 
    compile(libraries.springBootAmqp)  // (rabbitMQ) 
    compile(libraries.springBootMail) 
//  compile(libraries.springBootVelocity)   // freemarker
    compile(libraries.springBootFreemarker)   //  
    
//  compile(libraries.springBootJdbc)  // SpringBootMybatis
    compile(libraries.springBootMyBatis) 
    compile(libraries.springBootDataRedis) 
    compile(libraries.springThymeleaf) 
    compile(libraries.springSecurity) 
    compile(libraries.springActuator) 

	compile(libraries.prometheus)
    compile(libraries.springSession)
	compile(libraries.springBootKafka) {
		exclude group: 'log4j', module: 'log4j'
	}
	compile(libraries.springBootKafkaTest) {
		exclude group: 'log4j', module: 'log4j'
	}
    
    testCompile(libraries.springBootTest) 
    testCompile(libraries.springSecurityTest)
	testCompile(libraries.junit)
}

configurations {
	all*.exclude group: 'log4j', module: 'log4j'
}

allprojects {
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
